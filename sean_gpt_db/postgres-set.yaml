apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres
        envFrom:
        - secretRef:
            name: sean-gpt-db-secrets
        - configMapRef:
            name: sean-gpt-env
        env:
        - name: PGDATA
          value: /data/pgdata
        volumeMounts:
        - name: postgres-volume
          mountPath: /data
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
          readOnly: true
      volumes:
      - name: init-scripts
        configMap:
          name: postgres-init-script
  volumeClaimTemplates:
  - metadata:
      name: postgres-volume
    spec:
      storageClassName: standard
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
spec:
  clusterIP: None
  selector:
    app: postgres
  ports:
    - port: 5432
      targetPort: 5432
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-script
data:
  init.sh: |
    #!/bin/bash
    # Create a new user
    PGPASSWORD=$POSTGRES_PASSWORD psql -v ON_ERROR_STOP=1 -U $POSTGRES_USER -d postgres -c "CREATE USER $API_DB_USER WITH ENCRYPTED PASSWORD '$API_DB_PASSWORD';"

    # Create a new database
    PGPASSWORD=$POSTGRES_PASSWORD psql -v ON_ERROR_STOP=1 -U $POSTGRES_USER -d postgres -c "CREATE DATABASE $DATABASE_NAME;"

    # Create table and insert data as admin user
    PGPASSWORD=$POSTGRES_PASSWORD psql -v ON_ERROR_STOP=1 -U $POSTGRES_USER -d $DATABASE_NAME -c '
        CREATE TABLE IF NOT EXISTS userdata (
            id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            email VARCHAR(255) NOT NULL UNIQUE,
            hashed_password VARCHAR(255) NOT NULL
        );
        INSERT INTO userdata (email, hashed_password)
        VALUES ('\''johndoe@example.com'\'', '\''$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW'\'');
    '
    # Grant specific privileges to API user
    PGPASSWORD=$POSTGRES_PASSWORD psql -v ON_ERROR_STOP=1 -U $POSTGRES_USER -d $DATABASE_NAME -c "
        GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE userdata TO $API_DB_USER;
    "