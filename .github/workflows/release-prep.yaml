name: Prepare for Release

on:
  workflow_dispatch:
  pull_request:
    types: [opened]
    branches:
      - main

permissions:
  contents: write
    
jobs:
  test-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}   

      - name: test-backend
        uses: ./.github/actions/test-backend
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          ADMIN_PHONE: ${{ secrets.ADMIN_PHONE }}
          ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          API_DB_USER: ${{ secrets.API_DB_USER }}
          API_DB_PASSWORD: ${{ secrets.API_DB_PASSWORD }}
          TWILIO_TEST_SID: ${{ secrets.TWILIO_TEST_SID }}
          TWILIO_TEST_AUTH_TOKEN: ${{ secrets.TWILIO_TEST_AUTH_TOKEN }}
          TWILIO_SID: ${{ secrets.TWILIO_SID }}
          TWILIO_AUTH_TOKEN: ${{ secrets.TWILIO_AUTH_TOKEN }}
  
          API_DB_HOST: localhost
          REDIS_HOST: localhost
          DEBUG: "True"
          
  check-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}   

      - name: Extract Version from pyproject.toml
        id: extract-version
        uses: ./.github/actions/retrieve_version
        with:
          pyproject-path: 'pyproject.toml'

      - name: Fetch Tags from Main Branch
        run: git fetch --tags origin main

      - name: Check for Matching Tag on Main
        run: |
          version_tag="v${{ steps.extract-version.outputs.version }}"
          if git rev-parse "refs/tags/$version_tag" >/dev/null 2>&1; then
            echo "The version tag ($version_tag) already exists on the main branch."
            exit 1
          fi

  build-package:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}   

      - name: Setup Python environment
        uses: ./.github/actions/setup
  
      - name: Build Package
        run: poetry build

      - name: Check for Auto-Commit
        id: check_autocommit
        run: |
          if [[ "$(git log -1 --pretty='%cn')" == "GitHub Action" ]]; then
            echo "This commit was made by the workflow. Skipping push to prevent recursion."
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit and Push Changes
        if: steps.check_autocommit.outputs.skip == 'false'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "[AUTO-COMMIT] Build package for version ${{ steps.extract-version.outputs.version }}"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
